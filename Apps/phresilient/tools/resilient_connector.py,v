head	1.10;
access;
symbols;
locks; strict;
comment	@# @;


1.10
date	2018.05.03.22.33.44;	author jang;	state Exp;
branches;
next	1.9;

1.9
date	2018.05.03.19.26.09;	author jang;	state Exp;
branches;
next	1.8;

1.8
date	2018.05.03.19.08.11;	author jang;	state Exp;
branches;
next	1.7;

1.7
date	2017.10.30.00.43.04;	author iam;	state Exp;
branches;
next	1.6;

1.6
date	2017.10.12.21.28.57;	author james.ng;	state Exp;
branches;
next	1.5;

1.5
date	2017.10.11.22.33.40;	author james.ng;	state Exp;
branches;
next	1.4;

1.4
date	2017.10.11.22.08.08;	author james.ng;	state Exp;
branches;
next	1.3;

1.3
date	2017.10.09.21.16.06;	author iam;	state Exp;
branches;
next	1.2;

1.2
date	2017.10.04.04.37.42;	author iam;	state Exp;
branches;
next	1.1;

1.1
date	2017.10.02.21.56.29;	author iam;	state Exp;
branches;
next	;


desc
@@


1.10
log
@1.0.27
@
text
@# -----------------------------------------
# Phantom sample App Connector python file
# -----------------------------------------

# Phantom App imports
import phantom.app as phantom
from phantom.base_connector import BaseConnector
from phantom.action_result import ActionResult
from phantom.vault import Vault

# Usage of the consts file is recommended
# from resilient_consts import *
import requests
import json
from bs4 import BeautifulSoup
import co3
import time, calendar, dateutil.parser, datetime


# get string value: return "" if key not in dictionary, otherwise value
# deprecated use dict.get(key, "")
def getsv(dic, key):
    if key in dic:
        return dic[key]
    else:
        return ""


# add key as target_key to target dictionary if key exists in source dictionary
def addifkey(dic, key, tdic, tkey):
    if key in dic:
        tdic[tkey] = dic[key]


class ResilientConnector(BaseConnector):

    def __init__(self):

        # Call the BaseConnectors init first
        super(ResilientConnector, self).__init__()

        self._state = None

        # Variable to hold a base_url in case the app makes REST calls
        # Do note that the app json defines the asset config, so please
        # modify this as you deem fit.
        self._base_url = None


    def get_json_parameter(self, dic, key, action_result):
        if key not in dic:
            return dict()

        value = dic[key]

        action_id = self.get_action_identifier()

        if not isinstance(value, basestring):
            errmsg = "{} failed. {} field is not a string (type={})".format(action_id, key, type(value))
            self.save_progress(errmsg)
            return action_result.set_status(phantom.APP_ERROR, errmsg)

        try:
            payload = json.loads(value)
            return payload
        except Exception as e:
            errmsg = "{} failed. {} field is not valid json, {}".format(action_id, key, repr(e))
            self.save_progress(errmsg)
            return action_result.set_status(phantom.APP_ERROR, errmsg)


    def __handle_exceptions(self, e, action_result):
        action_id = self.get_action_identifier()
        self.save_progress("{} failed: {}.".format(action_id, repr(e)))
        try:
            if e.response == None:
                return action_result.set_status(phantom.APP_ERROR, repr(e))
    
            if e.response.status_code == 400:
                self.save_progress("Bad request.")
                return action_result.set_status(phantom.APP_ERROR, "Bad request.")
    
            elif e.response.status_code == 401:
                self.save_progress("Unauthorized - most commonly, the provided session ID is invalid.")
                return action_result.set_status(phantom.APP_ERROR, "Unauthorized - most commonly, the provided session ID is invalid.")
    
            elif e.response.status_code == 403:
                self.save_progress("Forbidden - most commonly, user authentication failed.")
                return action_result.set_status(phantom.APP_ERROR, "Forbidden - most commonly, user authentication failed.")
    
            elif e.response.status_code == 404:
                self.save_progress("Object not found.")
                return action_result.set_status(phantom.APP_ERROR, "Object not found.")
    
            elif e.response.status_code == 409:
                self.save_progress("Conflicting PUT operation.")
                return action_result.set_status(phantom.APP_ERROR, "Conflicting PUT operation.")
    
            elif e.response.status_code == 500:
                self.save_progress("Internal error.")
                return action_result.set_status(phantom.APP_ERROR, "Internal error.")
    
            elif e.response.status_code == 503:
                self.save_progress("Service unavailable - usually related to LDAP not being accessible.")
                return action_result.set_status(phantom.APP_ERROR, "Service unavailable - usually related to LDAP not being accessible.")
    
            else:
                self.save_progress("Error: status code {}".format(e.response.status_code))
                return action_result.set_status(phantom.APP_ERROR, "Error: status code {}".format(e.response.status_code))

        except:
            pass

        self.save_progress("Error, Action Failed: {}", repr(e))
        return action_result.set_status(phantom.APP_ERROR, "Error, Action Failed: {}", repr(e))


    def _handle_test_connectivity(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_list_tickets(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents?want_closed={}".format(param['want_closed'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        itemtype = "incidents"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_get_ticket(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}".format(param['incident_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "incidents"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_create_ticket(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents?want_full_data={}&want_tasks={}".format(param['want_full_data'], param['want_tasks'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        fullincidentdatadto = getsv(param, 'fullincidentdatadto')
        if len(fullincidentdatadto) > 1:
            try:
                payload = json.loads(fullincidentdatadto)
            except Exception as e:
                self.save_progress("{} failed. fullincidentdatadto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. fullincidentdatadto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        if 'name' not in payload:
            addifkey(param, 'incident_name', payload, 'name')
        if 'description' not in payload:
            addifkey(param, 'incident_description', payload, 'description')
        if 'discovered_date' not in payload:
            payload['discovered_date'] = calendar.timegm(time.gmtime()) * 1000
        
        if 'name' not in payload:
            self.save_progress("json payload does not have required 'name' key")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'name' key")
        if 'description' not in payload:
            self.save_progress("json payload does not have required 'description' key")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'description' key")
        if 'discovered_date' not in payload:
            self.save_progress("json payload does not have required 'discovered_date' key")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'discovered_date' key")

        try:
            self.save_progress("POST {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.post(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "incidents"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_update_ticket(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}".format(param['incident_id'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        fullincidentdatadto = param['fullincidentdatadto']
        if len(fullincidentdatadto) > 1:
            try:
                payload = json.loads(fullincidentdatadto)
            except Exception as e:
                self.save_progress("{} failed. fullincidentdatadto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. fullincidentdatadto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        if 'name' not in payload:
            self.save_progress("json payload does not have 'name' key, payload should be result of get_ticket")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'name' key, payload should be result of get_ticket")
        if 'description' not in payload:
            self.save_progress("json payload does not have 'description' key, payload should be result of get_ticket")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'description' key, payload should be result of get_ticket")
        if 'discovered_date' not in payload:
            self.save_progress("json payload does not have 'discovered_date' key, payload should be result of get_ticket")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'discovered_date' key, payload should be result of get_ticket")
        
        try:
            self.save_progress("PUT {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.put(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "incidents"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_search_tickets(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        payload = dict()
        conditions = list()
        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            call = "/incidents/query?return_level=full"
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        querydto = getsv(param, 'querydto')
        if len(querydto) > 1:
            try:
                payload = json.loads(querydto)
            except Exception as e:
                self.save_progress("{} failed. querydto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. querydto field is not valid json.".format(action_id))
        else:
            payload = dict()

        if 'filters' in payload:
            filters = payload['filters']
        else:
            filters = list()
            payload['filters'] = filters

        conditions = list()
        if param.get('add_condition_all_active_tickets') is True:
            conditions.append({"field_name": "plan_status", "method": "equals", "value": "A"})
        if param.get('add_condition_created_in_last_24_hours') is True:
            conditions.append({"field_name": "create_date", "method": "gte",
                "value": calendar.timegm((datetime.datetime.utcnow() - datetime.timedelta(days=1)).utctimetuple()) * 1000})
        if param.get('add_condition_closed_in_last_24_hours') is True:
            conditions.append({"field_name": "end_date", "method": "gte",
                "value": calendar.timegm((datetime.datetime.utcnow() - datetime.timedelta(days=1)).utctimetuple()) * 1000})
            
        for con in ['1st', '2nd', '3rd', '4th', '5th']:
            try:
                name = getsv(param, "{}_condition_field_name".format(con))
                value = getsv(param, "{}_condition_field_value".format(con))
                method = getsv(param, "{}_condition_comparison_method".format(con))
                isdate = param.get("{}_condition_value_is_datetime".format(con))

                ln = len(name) 
                lv = len(value)
                lm = len(method)

                # no condition, skip
                if (ln + lv + lm) == 0:
                    self.save_progress("{} condition is not complete".format(con))
                    continue

                if isdate:
                    try:
                        value = calendar.timegm(dateutil.parser.parse(value).utctimetuple()) * 1000
                    except Exception as e:
                        self.save_progress("Warning: {} condition value is not a datetime as expected: {}, skipping".format(con, e))
                        continue

                conditions.append({"field_name": name, "method": method, "value": value})
            except Exception as e:
                self.save_progress("Warning: {} condition not valid, skipping: {}.".format(con, e))

        if len('conditions') == 0:
            self.save_progress("json payload does not have 'conditions' key.")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'conditions' key")
    
        filters.append({ "conditions": conditions })

        try:
            self.save_progress("POST {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.post(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        itemtype = "incidents"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_list_artifacts(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/artifacts".format(param['incident_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        itemtype = "artifacts"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_get_artifact(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/artifacts/{}".format(param['incident_id'], param['artifact_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "artifacts"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_create_artifact(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/artifacts".format(param['incident_id'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        incidentartifactdto = getsv(param, 'incidentartifactdto')
        if len(incidentartifactdto) > 1:
            try:
                payload = json.loads(incidentartifactdto)
            except Exception as e:
                self.save_progress("{} failed. incidentartifactdto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. incidentartifactdto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        if 'description' not in payload:
            description = getsv(param, 'description')
            if len(description) > 0:
                payload['description'] = description
                #addifkey(param, 'incident_description', payload, 'description')
                #payload['description'] = dict()
                #payload['description']['format'] = "text"
                #payload['description']['content'] = getsv(param, 'description')
        if 'type' not in payload:
            type = getsv(param, 'type').lower()
            if type == "url":
                type = 3
            elif type == "domain":
                type = 2
            elif type == "file":
                type = 13
            else:
                try:
                    type = int(type)
                except:
                    self.save_progress("{} failed. Type is not recognized or not an integer".format(action_id))
                    return action_result.set_status(phantom.APP_ERROR, "{} failed. Type is not recognized or not an integer".format(action_id))
            if type > 0:
                payload['type'] = type
        if 'value' not in payload:
            addifkey(param, 'value', payload, 'value')

        if 'type' not in payload:
            self.save_progress("json payload does not have required 'type' key")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'name' key")
        if 'value' not in payload:
            self.save_progress("json payload does not have required 'value' key")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'value' key")
        if 'description' not in payload:
            self.save_progress("json payload does not have required 'description' key")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'description' key")

        try:
            self.save_progress("POST {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.post(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        itemtype = "artifacts"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_update_artifact(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/artifacts/{}".format(param['incident_id'], param['artifact_id'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        incidentartifactdto = getsv(param, 'incidentartifactdto')
        if len(incidentartifactdto) > 1:
            try:
                payload = json.loads(incidentartifactdto)
            except Exception as e:
                self.save_progress("{} failed. incidentartifactdto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. incidentartifactdto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        if 'type' not in payload:
            self.save_progress("json payload does not have 'type' key, payload should be result of get_artifact")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'name' key, payload should be result of get_artifact")
        if 'value' not in payload:
            self.save_progress("json payload does not have 'value' key, payload should be result of get_artifact")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'value' key, payload should be result of get_artifact")
        if 'description' not in payload:
            self.save_progress("json payload does not have 'description' key, payload should be result of get_artifact")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'description' key, payload should be result of get_artifact")
        
        try:
            self.save_progress("PUT {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.put(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "artifacts"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_list_comments(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.headers['text_content_output_format'] = "objects_no_convert"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/comments".format(param['incident_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        itemtype = "comments"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_get_comment(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/comments/{}".format(param['incident_id'], param['comment_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "comments"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_create_comment(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/comments".format(param['incident_id'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        incidentcommentdto = getsv(param, 'incidentcommentdto')
        if len(incidentcommentdto) > 1:
            try:
                payload = json.loads(incidentcommentdto)
            except Exception as e:
                self.save_progress("{} failed. incidentcommentdto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. incidentcommentdto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        if 'text' not in payload:
            addifkey(param, 'text', payload, 'text')
        if 'parent_id' not in payload:
            addifkey(param, 'parent_id', payload, 'parent_id')

        if 'text' not in payload:
            self.save_progress("json payload does not have required 'text' key")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'text' key")

        try:
            self.save_progress("POST {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.post(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "comments"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_update_comment(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            call = "/incidents/{}/comments/{}".format(param['incident_id'], param['comment_id'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        payload = self.get_json_parameter(param, 'incidentcommentdto', action_result)
        if payload == phantom.APP_ERROR:
            return payload

        #self.debug_print("{} json is {}".format(action_id, payload))

        if 'text' not in payload:
            self.save_progress("json payload does not have required 'text' key, payload should be result of get comment")
            return action_result.set_status(phantom.APP_ERROR, "json payload does not have required 'text' key, payload should be result of get comment")

        try:
            self.save_progress("PUT {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.put(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "comments"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_list_tables(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/table_data".format(param['incident_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        itemtype = "tables"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_get_table(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/table_data/{}".format(param['incident_id'], param['table_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "tables"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_add_table_row(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/table_data/{}".format(param['incident_id'], param['table_id'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        datatablerowdatadto = param.get('datatablerowdatadto', "")
        if len(datatablerowdatadto) > 1:
            try:
                payload = json.loads(datatablerowdatadto)
            except Exception as e:
                self.save_progress("{} failed. datatablerowdatadto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. datatablerowdatadto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        for col in ['1st', '2nd', '3rd', '4th', '5th']:
                key = param.get('{}_cell_property'.format(col), "")
                value = param.get('{}_cell_value'.format(col))
                if len(key) > 1 and len(value) > 1:
                    payload['cells'][key] = value
                elif len(key) > 1 or len(value) > 1:
                    self.save_progress("{} cell specification is not complete".format(con))
                    continue

        try:
            self.save_progress("POST {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.post(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "table row"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_update_table_row(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/table_data/{}/row_date/{}".format(param['incident_id'], param['table_id'], param['row_id'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        datatablerowdatadto = param.get('datatablerowdatadto', "")
        if len(datatablerowdatadto) > 1:
            try:
                payload = json.loads(datatablerowdatadto)
            except Exception as e:
                self.save_progress("{} failed. datatablerowdatadto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. datatablerowdatadto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        for col in ['1st', '2nd', '3rd', '4th', '5th']:
                key = param.get('{}_cell_property'.format(col), "")
                value = param.get('{}_cell_value'.format(col))
                if len(key) > 1 and len(value) > 1:
                    payload['cells'][key] = value
                elif len(key) > 1 or len(value) > 1:
                    self.save_progress("{} cell specification is not complete".format(con))
                    continue

        try:
            self.save_progress("PUT {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.put(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "table row"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_update_table_row_with_key(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()
        # all parameters are required so all parameters are len() > 0

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        datatablerowdatadto = param.get('datatablerowdatadto', "")
        if len(datatablerowdatadto) > 1:
            try:
                payload = json.loads(datatablerowdatadto)
            except Exception as e:
                self.save_progress("{} failed. datatablerowdatadto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. datatablerowdatadto field is not valid json.".format(action_id))
        else:
            self.save_progress("{} failed. datatablerowdatadto field is empty string.".format(action_id))
            return action_result.set_status(phantom.APP_ERROR, "{} failed. datatablerowdatadto field is empty string.".format(action_id))

        # get table first
        try:
            call = "/incidents/{}/table_data/{}".format(param['incident_id'], param['table_id'])
            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("GET successful")
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        def find_row(table, key, value):
            for row in table['rows']:
                if key in row['cells']:
                    if row['cells'][key] == value:
                        return row['id']
            return None

        key = param['key']
        value = param['value']
        rowid = find_row(retval, key, value)

        if rowid == None:
            self.save_progress("{} failed. Cannot match key/value.".format(action_id, key, value))
            return action_result.set_status(phantom.APP_ERROR, "{} failed. Cannot match key/value.".format(action_id, key, value))

        try:
            call = "/incidents/{}/table_data/{}/row_date/{}".format(param['incident_id'], param['table_id'], row_id)
            self.save_progress("PUT {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.put(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "table row"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_list_tasks(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/tasks"

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = retval
        itemtype = "tasks"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_get_task(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/tasks/{}".format(param['task_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "tasks"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_update_task(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/tasks/{}".format(param['task_id)'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        taskdto = param.get('taskdto', "")
        if len(taskdto) > 1:
            try:
                payload = json.loads(taskdto)
            except Exception as e:
                self.save_progress("{} failed. taskdto field is not valid json.".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. taskdto field is not valid json.".format(action_id))
        else:
            payload = dict()
            
        try:
            self.save_progress("PUT {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.put(call, payload)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "tasks"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_close_task(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            self._client.connect(config['user'], config['password'])
            call = "/tasks/{}".format(param['task_id)'])
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        try:
            #self.save_progress("GET {}".format(call))
            #retval = self._client.get(call)
            #payload = retval
            #payload['status'] = "C"
            #self.save_progress("PUT {}".format(call))
            #self.save_progress("BODY {}".format(payload))
            def apply(arg):
                arg['status'] = "C"
                return arg

            retval = self.client.get_put(call, arg)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "tasks"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_list_attachments(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/attachments".format(param['incident_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = retval
        itemtype = "attachments"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_get_attachment(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/attachments/{}".format(param['incident_id'], param['attachment_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "attachments"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_download_attachment(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/attachments/{}".format(param['incident_id'], param['attachment_id'])

            self.save_progress("GET {}".format(call))
            retval = self._client.get(call)
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "attachments"
        for r in retval:
            action_result.add_data("OK")
        summary = action_result.update_summary({})
        summary['Length of file'] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def _handle_add_attachment(self, param):
        action_id = self.get_action_identifier()
        self.save_progress("In action handler for: {0}".format(action_id))
        action_result = self.add_action_result(ActionResult(dict(param)))
    
        config = self.get_config()

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=config['verify'])
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
            self._client.connect(config['user'], config['password'])
            call = "/incidents/{}/attachments".format(param['incident_id'])

            container_id = self.get_container_id()
            vault_info = Vault.get_file_info(vault_id=param['vault_id'], container_id=container_id)
            if len(vault_info) == 0:
                self.save_progress("{} failed. {}: vault_id not valid.".format(action_id, param['vault_id']))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. {}: vault_id not valid.".format(action_id, param['vault_id']))
            path = vault_info[0]['path']
            name = filename=vault_info[0]['name']

            retval = self._client.post_attachment(call, path, filename=name)
            self.save_progress("POST_ATTACHMENT {} path={} name={}".format(call, path, name))
            self.save_progress("{} successful.".format(action_id))
        except Exception as e:
            return self.__handle_exceptions(e, action_result)

        retval = [ retval ]
        itemtype = "attachments"
        for r in retval:
            action_result.add_data(r)
        summary = action_result.update_summary({})
        summary['Number of {}'.format(itemtype)] = len(retval)
        return action_result.set_status(phantom.APP_SUCCESS)


    def handle_action(self, param):

        ret_val = phantom.APP_SUCCESS

        # Get the action that we are supposed to execute for this App Run
        action_id = self.get_action_identifier()

        self.debug_print("action_id", action_id)

        if action_id == 'test_connectivity':
            ret_val = self._handle_test_connectivity(param)

        elif action_id == 'list_tickets':
            ret_val = self._handle_list_tickets(param)

        elif action_id == 'get_ticket':
            ret_val = self._handle_get_ticket(param)

        elif action_id == 'create_ticket':
            ret_val = self._handle_create_ticket(param)

        elif action_id == 'update_ticket':
            ret_val = self._handle_update_ticket(param)

        elif action_id == 'search_tickets':
            ret_val = self._handle_search_tickets(param)

        elif action_id == 'list_artifacts':
            ret_val = self._handle_list_artifacts(param)

        elif action_id == 'get_artifact':
            ret_val = self._handle_get_artifact(param)

        elif action_id == 'create_artifact':
            ret_val = self._handle_create_artifact(param)

        elif action_id == 'update_artifact':
            ret_val = self._handle_update_artifact(param)

        elif action_id == 'list_comments':
            ret_val = self._handle_list_comments(param)

        elif action_id == 'get_comment':
            ret_val = self._handle_get_comment(param)

        elif action_id == 'create_comment':
            ret_val = self._handle_create_comment(param)

        elif action_id == 'update_comment':
            ret_val = self._handle_update_comment(param)

        elif action_id == 'list_tables':
            ret_val = self._handle_list_tables(param)

        elif action_id == 'get_table':
            ret_val = self._handle_get_table(param)

        elif action_id == 'add_table_row':
            ret_val = self._handle_add_table_row(param)

        elif action_id == 'update_table_row':
            ret_val = self._handle_update_table_row(param)

        elif action_id == "update_table_row_with_key":
            ret_val = self._handle_update_table_row_with_key(param)

        elif action_id == 'list_tasks':
            ret_val = self._handle_list_tasks(param)

        elif action_id == 'get_task':
            ret_val = self._handle_get_task(param)

        elif action_id == 'update_task':
            ret_val = self._handle_update_task(param)

        elif action_id == 'close_task':
            ret_val = self._handle_close_task(param)

        elif action_id == 'list_attachments':
            ret_val = self._handle_list_attachments(param)

        elif action_id == 'get_attachment':
            ret_val = self._handle_get_attachment(param)

        elif action_id == 'add_attachment':
            ret_val = self._handle_add_attachment(param)

        return ret_val


    def initialize(self):

        # Load the state in initialize, use it to store data
        # that needs to be accessed across actions
        self._state = self.load_state()

        """
        # get the asset config
        config = self.get_config()

        # Access values in asset config by the name

        # Required values can be accessed directly
        required_config_name = config['required_config_name']

        # Optional values should use the .get() function
        optional_config_name = config.get('optional_config_name')
        """

        return phantom.APP_SUCCESS

    def finalize(self):

        # Save the state, this data is saved accross actions and app upgrades
        self.save_state(self._state)
        return phantom.APP_SUCCESS


if __name__ == '__main__':

    import sys
    import pudb
#    pudb.set_trace()

    if (len(sys.argv) < 2):
        print "No test json specified as input"
        exit(0)

    with open(sys.argv[1]) as f:
        in_json = f.read()
        in_json = json.loads(in_json)
        print(json.dumps(in_json, indent=4))

        connector = ResilientConnector()
        connector.print_progress_message = True
        ret_val = connector._handle_action(json.dumps(in_json), None)
        print (json.dumps(json.loads(ret_val), indent=4))

    exit(0)

@


1.9
log
@phresilient-14
@
text
@d470 2
a471 1
                addifkey(param, 'incident_description', payload, 'description')
d885 1
a885 1
    def _handle_update_table_row_by_key(self, param):
a1063 2
            if param.get('handle_format', False) == True:
                self._client.headers['handle_format'] = "names"
d1161 2
d1190 2
d1281 2
a1282 2
        elif action_id == "update_table_row_by_key":
            ret_val = self._handle_update_table_row_by_key(param)
@


1.8
log
@*** empty log message ***
@
text
@d579 3
d608 2
d637 2
d690 2
@


1.7
log
@*** empty log message ***
@
text
@d9 1
d126 1
a126 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d143 1
a143 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d169 1
a169 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d179 1
a179 1
	    retval = [ retval ]
d196 1
a196 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d237 1
a237 1
	    retval = [ retval ]
d254 1
a254 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d288 1
a288 1
	    retval = [ retval ]
d307 1
a307 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d309 3
a311 1
            call = "/incidents/query?return_level=full&handle_format=names"
d398 1
a398 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d424 1
a424 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d434 1
a434 1
	    retval = [ retval ]
d451 1
a451 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d470 1
a470 1
            	addifkey(param, 'incident_description', payload, 'description')
d527 1
a527 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d561 1
a561 1
	    retval = [ retval ]
d578 1
a578 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d604 1
a604 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d631 1
a631 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d681 1
a681 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d722 3
a724 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d750 3
a752 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d779 3
a781 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d831 3
a833 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d875 98
d981 3
a983 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d985 1
a985 1
            call = "/tasks/{}".format(param['incident_id'], param['table_id'])
d1010 3
a1012 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d1053 3
a1055 1
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
d1062 94
a1157 5
            payload = retval
            payload['status'] = "C"
            self.save_progress("PUT {}".format(call))
            self.save_progress("BODY {}".format(payload))
            retval = self._client.put(call, payload)
d1163 36
a1198 1
        itemtype = "tasks"
d1269 6
d1284 9
@


1.6
log
@*** empty log message ***
@
text
@d20 1
d688 1
a688 1
        self.debug_print("{} json is {}".format(action_id, payload))
d711 256
a975 1

d1018 21
@


1.5
log
@*** empty log message ***
@
text
@d48 22
d172 1
a172 1
            incident = self._client.get(call)
d177 1
d200 2
a201 2
        payload = dict()
        if len(getsv(param, 'fullincidentdatadto')) > 1:
d203 1
a203 1
                payload = json.loads(getsv(param, 'fullincidentdatadto'))
d206 3
a208 1
                return action_result.set_status(phantom.APP_ERROR, "{} failed. fullincidentdatadto field is not valid json.".fornat(action_id))
d230 1
a230 1
            incident = self._client.post(call, payload)
d235 1
d258 2
a259 2
        payload = dict()
        if len(param['fullincidentdatadto']) > 1:
d261 1
a261 1
                payload = json.loads(param['fullincidentdatadto'])
d264 3
a266 1
                return action_result.set_status(phantom.APP_ERROR, "{} failed. fullincidentdatadto field is not valid json.".fornat(action_id))
d281 1
a281 1
            incident = self._client.put(call, payload)
d286 1
d430 1
d453 2
a454 2
        payload = dict()
        if len(getsv(param, 'incidentartifactdto')) > 1:
d456 1
a456 1
                payload = json.loads(getsv(param, 'incidentartifactdto'))
d459 3
a461 1
                return action_result.set_status(phantom.APP_ERROR, "{} failed. incidentartifactdto field is not valid json.".fornat(action_id))
d466 4
a469 3
                payload['description'] = dict()
                payload['description']['format'] = "text"
                payload['description']['content'] = getsv(param, 'description')
a525 1

d529 2
a530 2
        payload = dict()
        if len(getsv(param, 'incidentartifactdto')) > 1:
d532 1
a532 1
                payload = json.loads(param['incidentartifactdto'])
d535 3
a537 1
                return action_result.set_status(phantom.APP_ERROR, "{} failed. incidentartifactdto field is not valid json.".fornat(action_id))
d552 1
a552 1
            incident = self._client.put(call, payload)
d557 1
d610 92
d738 1
a738 1
        elif action_id == 'list artifacts':
d741 1
a741 1
        elif action_id == 'get artifact':
d744 1
a744 1
        elif action_id == 'create artifact':
d747 1
a747 1
        elif action_id == 'update artifact':
d750 1
a750 1
        elif action_id == 'list comments':
d753 1
a753 1
        elif action_id == 'get comment':
d756 1
a756 1
        elif action_id == 'create comment':
d759 1
a759 1
        elif action_id == 'update comment':
@


1.4
log
@*** empty log message ***
@
text
@d192 10
d432 5
a436 3
            payload['description'] = dict()
            payload['description']['format'] = "text"
            payload['description']['content'] = getsv(param, 'description')
d449 4
a452 3
                    self.save_progress("{} failed. Type is not recognized or not an integer > 0".format(action_id))
                    return action_result.set_status(phantom.APP_ERROR, "{} failed. Type is not recognized or not an integer > 0".format(action_id))
            payload['type'] = type
a453 3
            if value not in param:
                self.save_progress("{} failed. Value is a required parameter".format(action_id))
                return action_result.set_status(phantom.APP_ERROR, "{} failed. Value is a required parameter".format(action_id))
d456 10
@


1.3
log
@*** empty log message ***
@
text
@a0 1
### --- start --- conn_1.tmp
a104 2
            return action_result.set_status(phantom.APP_SUCCESS)

d108 2
d124 1
a124 1
            incidents = self._client.get(call)
a125 9

            for i in incidents:
                action_result.add_data(i)

            summary = action_result.update_summary({})
            summary['Number of incidents'] = len(incidents)

            return action_result.set_status(phantom.APP_SUCCESS)

d129 7
a151 6

            summary = action_result.update_summary({})
            summary['Number of incidents'] = 1
            action_result.add_data(incident)
            return action_result.set_status(phantom.APP_SUCCESS)

d155 7
a196 6

            summary = action_result.update_summary({})
            summary['Number of incidents'] = 1
            action_result.add_data(incident)
            return action_result.set_status(phantom.APP_SUCCESS)

d200 7
a218 1

a244 6

            summary = action_result.update_summary({})
            summary['Number of incidents'] = 1
            action_result.add_data(incident)
            return action_result.set_status(phantom.APP_SUCCESS)

d248 7
a290 1

a293 1
            
d334 116
a449 1
            incidents = self._client.post(call, payload)
d451 10
d462 11
a472 2
            for i in incidents:
                action_result.add_data(i)
d474 2
a475 3
            summary = action_result.update_summary({})
            summary['Number of incidents'] = len(incidents)
            return action_result.set_status(phantom.APP_SUCCESS)
d477 23
d503 59
d591 24
@


1.2
log
@*** empty log message ***
@
text
@d17 15
a31 1
import time, calendar, dateutil
d49 3
a51 2
    def __handle_exceptions(self, e):
        self.save_progress("{} failed: {}.".format(self.get_action_identifier().capitalize(), repr(e)))
d91 2
a92 2
        self.save_progress("Error, Action Failed")
        return action_result.set_status(phantom.APP_ERROR, "Error, Action Failed")
d96 2
a97 1
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
d105 1
a105 1
            self.save_progress("{} successful.".format(self.get_action_identifier().capitalize()))
d109 1
a109 1
            return self.__handle_exceptions(e)
d113 2
a114 1
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
d126 1
a126 1
            self.save_progress("{} successful.".format(self.get_action_identifier().capitalize()))
d137 1
a137 1
            return self.__handle_exceptions(e)
d141 2
a142 1
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
d154 1
a154 1
            self.save_progress("{} successful.".format(self.get_action_identifier().capitalize()))
d162 1
a162 1
            return self.__handle_exceptions(e)
d166 2
a167 1
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
d176 2
d179 14
a192 15
            payload = dict()
            if len(param['fullincidentdatadto']) > 1:
                try:
                    payload = json.loads(param['fullincidentdatadto'])
                except Exception as e:
                    self.save_progress("{} failed. fullincidentdatadto field is not valid json.".format(self.get_action_identifier().capitalize()))
                    return action_result.set_status(phantom.APP_ERROR, "{} failed. fullincidentdatadto field is not valid json.".fornat(self.get_action_identifier().capitalize()))
                
            if 'name' not in payload:
                payload['name'] = param['incident_name']
            if 'description' not in payload:
                payload['description'] = param['incident_description']

            if 'discovered_date' not in payload:
                payload['discovered_date'] = calendar.timegm(time.gmtime()) * 1000
d194 1
d196 1
d198 1
a198 1
            self.save_progress("{} successful.".format(self.get_action_identifier().capitalize()))
d206 1
a206 1
            return self.__handle_exceptions(e)
d210 2
a211 1
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
d221 20
a240 17
            payload = dict()
            if len(param['fullincidentdatadto']) > 1:
                try:
                    payload = json.loads(param['fullincidentdatadto'])
                except Exception as e:
                    self.save_progress("{} failed. fullincidentdatadto field is not valid json.".format(self.get_action_identifier().capitalize()))
                    return action_result.set_status(phantom.APP_ERROR, "{} failed. fullincidentdatadto field is not valid json.".fornat(self.get_action_identifier().capitalize()))
                
            if 'name' not in payload:
                self.save_progress("json payload does not have 'name' key, payload should be result of get_ticket")
                return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'name' key, payload should be result of get_ticket")
            if 'description' not in payload:
                self.save_progress("json payload does not have 'description' key, payload should be result of get_ticket")
                return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'description' key, payload should be result of get_ticket")
            if 'discovered_date' not in payload:
                self.save_progress("json payload does not have 'discovered_date' key, payload should be result of get_ticket")
                return action_result.set_status(phantom.APP_ERROR, "json payload does not have 'discovered_date' key, payload should be result of get_ticket")
d242 1
d244 1
d246 1
a246 1
            self.save_progress("{} successful.".format(self.get_action_identifier().capitalize()))
d254 1
a254 1
            return self.__handle_exceptions(e)
d258 2
a259 1
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
d264 2
d269 3
a271 1
            call = "/incidents/query"
d273 8
a281 24
            if len(param['querydto']) > 1:
                try:
                    payload = json.loads(param['querydto'])
                except Exception as e:
                    self.save_progress("{} failed. querydto field is not valid json.".format(self.get_action_identifier().capitalize()))
                    return action_result.set_status(phantom.APP_ERROR, "{} failed. querydto field is not valid json.".format(self.get_action_identifier().capitalize()))

            payload['filters'] = list()

            if param['add condition all active tickets'] is True:
                payload['filters'].append({"field_name": "plan_status", "method": "equals", "value": "A"})

            if param['add condition created in last 24 hours'] is True:
                payload['filters'].append({"field_name": "create_date", "method": "gte", "value": calendar.timegm((datetime.datetime.utcnow() - timedelta(days=1)).utctimetuple()) * 1000})
                
            for con in ['1st', '2nd', '3rd', '4th', '5th']:
                try:
                    field_name = param["{} condition field name".format(con)]
                    value = param["{} condition value".format(con)]
                    method = param["{} condition comparison method".format(con)]

                    lfn = len(field_name) 
                    lv  = len(value)
                    lm  = len(method)
d283 39
a321 2
                    # no condition, skip
                    if (lfn + lv + lm) == 0:
d324 11
a334 20
                    if lfn == 0 or lv == 0 or lm == 0:
                        self.save_progress("Error: {} condition not fully specified.".format(con))
                        return action_result.set_status(phantom.APP_ERROR, "Error: {} condition not fully specified.".format(con))

                    if param["{} condition value is a datetime".format(con)]:
                        try:
                            value = calendar.timegm(dateutil.parser.parse(value).utctimetuple()) * 1000
                        except:
                            self.save_progress("Error: {} condition value is not a datetime as expected.".format(con))
                            return action_result.set_status(phantom.APP_ERROR, "Error: {} value is not a datetime as expected.".format(con))

                    payload['filters'].append({"field_name": field_name, "method": method, "value": value})
                except:
                    self.save_progress("Error: {} condition not valid.".format(con))
                    return action_result.set_status(phantom.APP_ERROR, "Error: {} condition not valid.".format(con))

            if len('filters') == 0:
                self.save_progress("Error: json payload does not have 'filters' key.")
                return action_result.set_status(phantom.APP_ERROR, "Error: json payload does not have 'filters' key")
        
d336 1
d338 1
a338 1
            self.save_progress("{} successful.".format(self.get_action_identifier().capitalize()))
d348 1
a348 1
            return self.__handle_exceptions(e)
d358 1
a358 1
        self.debug_print("action_id", self.get_action_identifier())
d374 1
a374 1
            ret_val = self._handle_create_ticket(param)
d377 1
a377 1
            ret_val = self._handle_create_ticket(param)
@


1.1
log
@Initial revision
@
text
@d17 1
a17 5


class RetVal(tuple):
    def __new__(cls, val1, val2):
        return tuple.__new__(RetVal, (val1, val2))
a33 82
    def _process_empty_reponse(self, response, action_result):

        if response.status_code == 200:
            return RetVal(phantom.APP_SUCCESS, {})

        return RetVal(action_result.set_status(phantom.APP_ERROR, "Empty response and no information in the header"), None)

    def _process_html_response(self, response, action_result):

        # An html response, treat it like an error
        status_code = response.status_code

        try:
            soup = BeautifulSoup(response.text, "html.parser")
            error_text = soup.text
            split_lines = error_text.split('\n')
            split_lines = [x.strip() for x in split_lines if x.strip()]
            error_text = '\n'.join(split_lines)
        except:
            error_text = "Cannot parse error details"

        message = "Status Code: {0}. Data from server:\n{1}\n".format(status_code,
                error_text)

        message = message.replace('{', '{{').replace('}', '}}')

        return RetVal(action_result.set_status(phantom.APP_ERROR, message), None)

    def _process_json_response(self, r, action_result):

        # Try a json parse
        try:
            resp_json = r.json()
        except Exception as e:
            return RetVal(action_result.set_status(phantom.APP_ERROR, "Unable to parse JSON response. Error: {0}".format(str(e))), None)

        # Please specify the status codes here
        if 200 <= r.status_code < 399:
            return RetVal(phantom.APP_SUCCESS, resp_json)

        # You should process the error returned in the json
        message = "Error from server. Status Code: {0} Data from server: {1}".format(
                r.status_code, r.text.replace('{', '{{').replace('}', '}}'))

        return RetVal(action_result.set_status(phantom.APP_ERROR, message), None)

    def _process_response(self, r, action_result):

        # store the r_text in debug data, it will get dumped in the logs if the action fails
        if hasattr(action_result, 'add_debug_data'):
            action_result.add_debug_data({'r_status_code': r.status_code})
            action_result.add_debug_data({'r_text': r.text})
            action_result.add_debug_data({'r_headers': r.headers})

        # Process each 'Content-Type' of response separately

        # Process a json response
        if 'json' in r.headers.get('Content-Type', ''):
            return self._process_json_response(r, action_result)

        # Process an HTML resonse, Do this no matter what the api talks.
        # There is a high chance of a PROXY in between phantom and the rest of
        # world, in case of errors, PROXY's return HTML, this function parses
        # the error and adds it to the action_result.
        if 'html' in r.headers.get('Content-Type', ''):
            return self._process_html_response(r, action_result)

        # it's not content-type that is to be parsed, handle an empty response
        if not r.text:
            return self._process_empty_reponse(r, action_result)

        # everything else is actually an error at this point
        message = "Can't process response from server. Status Code: {0} Data from server: {1}".format(
                r.status_code, r.text.replace('{', '{{').replace('}', '}}'))

        return RetVal(action_result.set_status(phantom.APP_ERROR, message), None)

    def _make_rest_call(self, endpoint, action_result, headers=None, params=None, data=None, method="get"):

        config = self.get_config()

        resp_json = None
d35 2
d38 1
a38 41
            request_func = getattr(requests, method)
        except AttributeError:
            return RetVal(action_result.set_status(phantom.APP_ERROR, "Invalid method: {0}".format(method)), resp_json)

        # Create a URL to connect to
        url = self._base_url + endpoint

        try:
            r = request_func(
                            url,
                            auth=("REPLACE ME: Replace with auth credentials"),
                            json=data,
                            headers=headers,
                            verify=config.get('verify_server_cert', False),
                            params=params)
        except Exception as e:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error Connecting to server. Details: {0}".format(str(e))), resp_json)

        return self._process_response(r, action_result)

### --- stop --- conn_1.tmp
### --- start --- actions

    def _handle_test_connectivity(self, param):
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
        action_result = self.add_action_result(ActionResult(dict(param)))
	
        config = self.get_config()
	#self.save_progress("CA Bundle is at {}".format(self.get_ca_bundle()))

        try:
            self._client = co3.SimpleClient(org_name=config['org_id'], base_url=config['base_url'], verify=True)
            self._client.connect(config['user'], config['password'])
            self.save_progress("Test connectivity successful.")
            return action_result.set_status(phantom.APP_SUCCESS)

        except Exception as e:
            self.save_progress("Test connectivity failed: {}.".format(repr(e)))

            self._r = e.response
            if self._r == None:
d40 2
a41 6

            if self._r.status_code == 200:
                self.save_progress("Test connectivity successful.")
                return action_result.set_status(phantom.APP_SUCCESS)

            elif self._r.status_code == 400:
d44 2
a45 2

            elif self._r.status_code == 401:
d48 2
a49 2

            elif self._r.status_code == 403:
d52 2
a53 2

            elif self._r.status_code == 404:
d56 2
a57 2

            elif self._r.status_code == 409:
d60 2
a61 2

            elif self._r.status_code == 500:
d64 2
a65 2

            elif self._r.status_code == 503:
d68 4
d73 2
a74 3
            else:
                self.save_progress("Error: status code {}".format(self._r.status_code))
                return action_result.set_status(phantom.APP_ERROR, "Error: status code {}".format(self._r.status_code))
d77 17
a93 1
        return action_result.get_status()
d99 1
a99 1
	
d109 1
a109 1
            self.save_progress("List incidents successful.")
d120 1
a120 45
            self.save_progress("List incidents failed: {}.".format(repr(e)))

            self._r = e.response
            if self._r == None:
                return action_result.set_status(phantom.APP_ERROR, repr(e))

            if self._r.status_code == 200:
                action_result.add_data(response)
                self.save_progress("Listing incidents successful.")
                return action_result.set_status(phantom.APP_SUCCESS)

            elif self._r.status_code == 400:
                self.save_progress("Bad request.")
                return action_result.set_status(phantom.APP_ERROR, "Bad request.")

            elif self._r.status_code == 401:
                self.save_progress("Unauthorized - most commonly, the provided session ID is invalid.")
                return action_result.set_status(phantom.APP_ERROR, "Unauthorized - most commonly, the provided session ID is invalid.")

            elif self._r.status_code == 403:
                self.save_progress("Forbidden - most commonly, user authentication failed.")
                return action_result.set_status(phantom.APP_ERROR, "Forbidden - most commonly, user authentication failed.")

            elif self._r.status_code == 404:
                self.save_progress("Object not found.")
                return action_result.set_status(phantom.APP_ERROR, "Object not found.")

            elif self._r.status_code == 409:
                self.save_progress("Conflicting PUT operation.")
                return action_result.set_status(phantom.APP_ERROR, "Conflicting PUT operation.")

            elif self._r.status_code == 500:
                self.save_progress("Internal error.")
                return action_result.set_status(phantom.APP_ERROR, "Internal error.")

            elif self._r.status_code == 503:
                self.save_progress("Service unavailable - usually related to LDAP not being accessible.")
                return action_result.set_status(phantom.APP_ERROR, "Service unavailable - usually related to LDAP not being accessible.")

            else:
                self.save_progress("Error: status code {}".format(self._r.status_code))
                return action_result.set_status(phantom.APP_ERROR, "Error: status code {}".format(self._r.status_code))

        self.save_progress("Error, Action Failed")
        return action_result.get_status()
d126 1
a126 1
	
d136 1
a140 1
            self.save_progress("Get incident successful.")
d144 1
a144 45
            self.save_progress("Get incident failed: {}.".format(repr(e)))

            self._r = e.response
            if self._r == None:
                return action_result.set_status(phantom.APP_ERROR, repr(e))

            if self._r.status_code == 200:
                action_result.add_data(response)
                self.save_progress("Get incident successful.")
                return action_result.set_status(phantom.APP_SUCCESS)

            elif self._r.status_code == 400:
                self.save_progress("Bad request.")
                return action_result.set_status(phantom.APP_ERROR, "Bad request.")

            elif self._r.status_code == 401:
                self.save_progress("Unauthorized - most commonly, the provided session ID is invalid.")
                return action_result.set_status(phantom.APP_ERROR, "Unauthorized - most commonly, the provided session ID is invalid.")

            elif self._r.status_code == 403:
                self.save_progress("Forbidden - most commonly, user authentication failed.")
                return action_result.set_status(phantom.APP_ERROR, "Forbidden - most commonly, user authentication failed.")

            elif self._r.status_code == 404:
                self.save_progress("Object not found.")
                return action_result.set_status(phantom.APP_ERROR, "Object not found.")

            elif self._r.status_code == 409:
                self.save_progress("Conflicting PUT operation.")
                return action_result.set_status(phantom.APP_ERROR, "Conflicting PUT operation.")

            elif self._r.status_code == 500:
                self.save_progress("Internal error.")
                return action_result.set_status(phantom.APP_ERROR, "Internal error.")

            elif self._r.status_code == 503:
                self.save_progress("Service unavailable - usually related to LDAP not being accessible.")
                return action_result.set_status(phantom.APP_ERROR, "Service unavailable - usually related to LDAP not being accessible.")

            else:
                self.save_progress("Error: status code {}".format(self._r.status_code))
                return action_result.set_status(phantom.APP_ERROR, "Error: status code {}".format(self._r.status_code))

        self.save_progress("Error, Action Failed")
        return action_result.get_status()
d150 1
a150 1
	
a156 1
            self.save_progress("POST {}".format(call))
d158 7
a164 5
            try:
                payload = json.loads(param['incident_json'])
            except Exception as e:
                self.save_progress("Create incident failed. Incident data is not valid json.")
                return action_result.set_status(phantom.APP_ERROR, "Create incident failed. Incident data is not valid json.")
a170 1
            import time, calendar
d173 2
a174 1
		
d176 1
a180 1
            self.save_progress("Create incident successful.")
d184 1
a184 5
            self.save_progress("Create incident failed: {}.".format(repr(e)))

            self._r = e.response
            if self._r == None:
                return action_result.set_status(phantom.APP_ERROR, repr(e))
a185 39
            if self._r.status_code == 200:
                action_result.add_data(response)
                self.save_progress("Create incidents successful.")
                return action_result.set_status(phantom.APP_SUCCESS)

            elif self._r.status_code == 400:
                self.save_progress("Bad request.")
                return action_result.set_status(phantom.APP_ERROR, "Bad request.")

            elif self._r.status_code == 401:
                self.save_progress("Unauthorized - most commonly, the provided session ID is invalid.")
                return action_result.set_status(phantom.APP_ERROR, "Unauthorized - most commonly, the provided session ID is invalid.")

            elif self._r.status_code == 403:
                self.save_progress("Forbidden - most commonly, user authentication failed.")
                return action_result.set_status(phantom.APP_ERROR, "Forbidden - most commonly, user authentication failed.")

            elif self._r.status_code == 404:
                self.save_progress("Object not found.")
                return action_result.set_status(phantom.APP_ERROR, "Object not found.")

            elif self._r.status_code == 409:
                self.save_progress("Conflicting PUT operation.")
                return action_result.set_status(phantom.APP_ERROR, "Conflicting PUT operation.")

            elif self._r.status_code == 500:
                self.save_progress("Internal error.")
                return action_result.set_status(phantom.APP_ERROR, "Internal error.")

            elif self._r.status_code == 503:
                self.save_progress("Service unavailable - usually related to LDAP not being accessible.")
                return action_result.set_status(phantom.APP_ERROR, "Service unavailable - usually related to LDAP not being accessible.")

            else:
                self.save_progress("Error: status code {}".format(self._r.status_code))
                return action_result.set_status(phantom.APP_ERROR, "Error: status code {}".format(self._r.status_code))

        self.save_progress("Error, Action Failed")
        return action_result.get_status()
d190 1
a190 1
	
a196 1
            self.save_progress("PUT {}".format(call))
d198 7
a204 5
            try:
                payload = json.loads(param['incident_json'])
            except Exception as e:
                self.save_progress("Update incident failed. Incident data is not valid json.")
                return action_result.set_status(phantom.APP_ERROR, "Update incident failed. Incident data is not valid json.")
d207 1
a207 1
            	self.save_progress("json payload does not have 'name' key, payload should be result of get_ticket")
d210 1
a210 1
            	self.save_progress("json payload does not have 'description' key, payload should be result of get_ticket")
d213 1
a213 1
            	self.save_progress("json payload does not have 'discovered_date' key, payload should be result of get_ticket")
d215 2
a216 1
		
d218 1
a222 1
            self.save_progress("Create incident successful.")
d226 1
a226 1
            self.save_progress("Update incident failed: {}.".format(repr(e)))
a227 3
            self._r = e.response
            if self._r == None:
                return action_result.set_status(phantom.APP_ERROR, repr(e))
d229 5
a233 4
            if self._r.status_code == 200:
                action_result.add_data(response)
                self.save_progress("Create incidents successful.")
                return action_result.set_status(phantom.APP_SUCCESS)
d235 4
a238 3
            elif self._r.status_code == 400:
                self.save_progress("Bad request.")
                return action_result.set_status(phantom.APP_ERROR, "Bad request.")
d240 7
a246 3
            elif self._r.status_code == 401:
                self.save_progress("Unauthorized - most commonly, the provided session ID is invalid.")
                return action_result.set_status(phantom.APP_ERROR, "Unauthorized - most commonly, the provided session ID is invalid.")
d248 1
a248 3
            elif self._r.status_code == 403:
                self.save_progress("Forbidden - most commonly, user authentication failed.")
                return action_result.set_status(phantom.APP_ERROR, "Forbidden - most commonly, user authentication failed.")
d250 2
a251 3
            elif self._r.status_code == 404:
                self.save_progress("Object not found.")
                return action_result.set_status(phantom.APP_ERROR, "Object not found.")
d253 40
a292 3
            elif self._r.status_code == 409:
                self.save_progress("Conflicting PUT operation.")
                return action_result.set_status(phantom.APP_ERROR, "Conflicting PUT operation.")
d294 2
a295 3
            elif self._r.status_code == 500:
                self.save_progress("Internal error.")
                return action_result.set_status(phantom.APP_ERROR, "Internal error.")
d297 3
a299 3
            elif self._r.status_code == 503:
                self.save_progress("Service unavailable - usually related to LDAP not being accessible.")
                return action_result.set_status(phantom.APP_ERROR, "Service unavailable - usually related to LDAP not being accessible.")
d301 2
a302 8
            else:
                self.save_progress("Error: status code {}".format(self._r.status_code))
                return action_result.set_status(phantom.APP_ERROR, "Error: status code {}".format(self._r.status_code))

        self.save_progress("Error, Action Failed")
        return action_result.get_status()
### --- stop --- actions
### --- start --- conn_2.tmp
a313 2
### --- stop --- conn_2.tmp
### --- start --- handle actions
d327 6
a335 3
### --- stop --- handle actions
### --- start --- conn_3.tmp

a385 1
### --- stop --- conn_3.tmp
@
